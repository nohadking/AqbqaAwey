// <auto-generated />
using System;
using Infarstuructre.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infarstuructre.Migrations
{
    [DbContext(typeof(AqbqaAweyDbcotext))]
    [Migration("20221113232241_dataBaceAdd")]
    partial class dataBaceAdd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domin.Entity.TbAboutusAboutUsPage", b =>
                {
                    b.Property<Guid>("IdAboutUsPage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DataEntry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryTimeAndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExcellentGuides")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FindTravelProfessional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodReviewByClient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAboutUs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShareTravelLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShareTravelProvence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titele")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WantToDo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAboutUsPage");

                    b.ToTable("TbAboutusAboutUsPages");
                });

            modelBuilder.Entity("Domin.Entity.TbGuideTourguideinformation", b =>
                {
                    b.Property<Guid>("IdTourguideinformation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Abstract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("BestTouristGuide")
                        .HasColumnType("bit");

                    b.Property<string>("DataEntry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectDirection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryTimeAndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExplorerTeamLead")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Savemoneytime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TourGuideName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TourGuidePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTourguideinformation");

                    b.ToTable("TbGuideTourguideinformations");
                });

            modelBuilder.Entity("Domin.Entity.TbHomeBannerMain", b =>
                {
                    b.Property<Guid>("IdBannerMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataEntrey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryTimeAndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoTrack")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdBannerMain");

                    b.ToTable("TbHomeBannerMains");
                });

            modelBuilder.Entity("Domin.Entity.TbHomeBuckectListsDescription", b =>
                {
                    b.Property<Guid>("IdBuckectLists")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("BuckectListsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DtatEntry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Entrytimeanddate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdBuckectLists");

                    b.ToTable("TbHomeBuckectListsDescriptions");
                });

            modelBuilder.Entity("Domin.Entity.TbHomeCategorieSbuckect", b =>
                {
                    b.Property<Guid>("IdcategoriesBuckect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CategoriesBuckect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DtatEntry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Entrytimeanddate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdcategoriesBuckect");

                    b.ToTable("TbHomeCategorieSbuckects");
                });

            modelBuilder.Entity("Domin.Entity.TbHomeDtripsSchedule", b =>
                {
                    b.Property<Guid>("IDtripsSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CleanlinessRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataEntry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DaysHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryTimeAndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacilitiesRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdTripCategories")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdcategoriesBuckect")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocationRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoneyRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceAfterDiscount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceDoesNotInclude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceIncludes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiCeratio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDtripsSchedule");

                    b.HasIndex("IdTripCategories");

                    b.HasIndex("IdcategoriesBuckect");

                    b.ToTable("TbHomeDtripsSchedules");
                });

            modelBuilder.Entity("Domin.Entity.TbHomeFooterDatum", b =>
                {
                    b.Property<Guid>("IdFooterData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CompanyProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataEnyry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailComp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Entrytimeanddate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebooklink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagramlink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkyou")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoCom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoboxZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteCo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFooterData");

                    b.ToTable("TbHomeFooterData");
                });

            modelBuilder.Entity("Domin.Entity.TbHomeFooterLatestNews", b =>
                {
                    b.Property<Guid>("IdlatestNews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DataEnyry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryTimeAndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextArea")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdlatestNews");

                    b.ToTable("TbHomeFooterLatestNews");
                });

            modelBuilder.Entity("Domin.Entity.TbHomeGetToKnowU", b =>
                {
                    b.Property<Guid>("IdGetToKnowUs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DataEntrey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryTimeAndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGetToKnowUs");

                    b.ToTable("TbHomeGetToKnowUs");
                });

            modelBuilder.Entity("Domin.Entity.TbHomeOurPartner", b =>
                {
                    b.Property<Guid>("IdOurPartners")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataEntry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryTimeAndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdOurPartners");

                    b.ToTable("TbHomeOurPartners");
                });

            modelBuilder.Entity("Domin.Entity.TbHomePhotoGalleryTrip", b =>
                {
                    b.Property<Guid>("IdPhotoGalleryTrips")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DataEntry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryTimeAndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IDtripsSchedule")
                        .HasColumnType("int");

                    b.Property<string>("PictureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPhotoGalleryTrips");

                    b.ToTable("TbHomePhotoGalleryTrips");
                });

            modelBuilder.Entity("Domin.Entity.TbHomeProvince", b =>
                {
                    b.Property<Guid>("IdProvinces")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DataEntry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryTimeAndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProvincesName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdProvinces");

                    b.ToTable("TbHomeProvinces");
                });

            modelBuilder.Entity("Domin.Entity.TbHomeTopDestination", b =>
                {
                    b.Property<Guid>("IdTopDestinations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DataEntrey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryTimeAndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTopDestinations");

                    b.ToTable("TbHomeTopDestinations");
                });

            modelBuilder.Entity("Domin.Entity.TbHomeTourguidedescription", b =>
                {
                    b.Property<Guid>("IdTourguidedescription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DataEntry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryTimeAndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tourguidedescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTourguidedescription");

                    b.ToTable("TbHomeTourguidedescriptions");
                });

            modelBuilder.Entity("Domin.Entity.TbHomeTripCategory", b =>
                {
                    b.Property<Guid>("IdTripCategories")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Categories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataEntrey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryTimeAndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdTripCategories");

                    b.ToTable("TbHomeTripCategories");
                });

            modelBuilder.Entity("Domin.Entity.TbHomeVedogallery", b =>
                {
                    b.Property<Guid>("Idvedogallery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DataEntry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryTimeAndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IDtripsSchedule")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Vidoname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Idvedogallery");

                    b.HasIndex("IDtripsSchedule");

                    b.ToTable("TbHomeVedogalleries");
                });

            modelBuilder.Entity("Domin.Entity.TbSeRatingDatum", b =>
                {
                    b.Property<Guid>("IdRatingData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DataEntry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryTimeAndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Evaluation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IDtripsSchedule")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MailClint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameClint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Views")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRatingData");

                    b.HasIndex("IDtripsSchedule");

                    b.ToTable("TbSeRatingData");
                });

            modelBuilder.Entity("Infarstuructre.ViewModel.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("ActiveUser")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domin.Entity.TbHomeDtripsSchedule", b =>
                {
                    b.HasOne("Domin.Entity.TbHomeTripCategory", "TbHomeTripCategory")
                        .WithMany()
                        .HasForeignKey("IdTripCategories")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domin.Entity.TbHomeCategorieSbuckect", "tbHomeCategorieSbuckect")
                        .WithMany()
                        .HasForeignKey("IdcategoriesBuckect")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TbHomeTripCategory");

                    b.Navigation("tbHomeCategorieSbuckect");
                });

            modelBuilder.Entity("Domin.Entity.TbHomeVedogallery", b =>
                {
                    b.HasOne("Domin.Entity.TbHomeDtripsSchedule", "tbHomeDtripsSchedule")
                        .WithMany()
                        .HasForeignKey("IDtripsSchedule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tbHomeDtripsSchedule");
                });

            modelBuilder.Entity("Domin.Entity.TbSeRatingDatum", b =>
                {
                    b.HasOne("Domin.Entity.TbHomeDtripsSchedule", "TbHomeDtripsSchedule")
                        .WithMany()
                        .HasForeignKey("IDtripsSchedule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TbHomeDtripsSchedule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Infarstuructre.ViewModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Infarstuructre.ViewModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infarstuructre.ViewModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Infarstuructre.ViewModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
